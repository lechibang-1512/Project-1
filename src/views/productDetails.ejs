<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.processor_number %> - Details</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <% locals.currentPage = 'products' %>
    <%- include('partials/header') %>

    <div class="container">
        <div class="product-details-card">
            <h1 class="text-center"><%= product.processor_number %></h1>
            <div class="product-details-link">
                <button onclick="window.location.href='/products'" class="back-button">‚Üê Back to CPUs</button>
            </div>
            
            <% if(typeof variants !== 'undefined' && Array.isArray(variants) && variants.length > 0) { %>
                <div class="variant-summary">
                    <span class="variant-count"><%= variants.length %> variants available for <%= modelName || product.processor_number %></span>
                </div>
                
                <div class="all-variants-section">
                    <h2>All Available Variants</h2>
                    
                    <div id="allVariantsTable" class="variants-table-container">
                        <h3>Compare All <%= variants.length %> Variants</h3>
                        <div class="table-controls">
                            <select id="sortVariants">
                                <option value="model">Sort by Model</option>
                                <option value="price-low">Sort by Price (Low to High)</option>
                                <option value="price-high">Sort by Price (High to Low)</option>
                                <option value="cores">Sort by Core Count</option>
                                <option value="frequency">Sort by Frequency</option>
                            </select>
                        </div>
                        <table class="variants-table">
                            <thead>
                                <tr>
                                    <th>Model</th>
                                    <th>Cores</th>
                                    <th>Frequency</th>
                                    <th>Cache</th>
                                    <th>TDP</th>
                                    <th>Price</th>
                                    <th>Stock</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="variantsTableBody">
                                <% variants.forEach(function(variant) { %>
                                    <tr class="<%= variant.id == currentId ? 'current-variant' : '' %>" data-price="<%= variant.sm_price %>" data-ram="<%= variant.ram %>" data-color="<%= variant.color %>">
                                        <td><%= variant.color || 'Standard' %></td>
                                        <td><%= variant.ram || 'N/A' %></td>
                                        <td><%= variant.rom || 'N/A' %></td>
                                        <td><%= variant.processor || 'Same' %></td>
                                        <td><%= variant.display_size || 'Same' %></td>
                                        <td>$<%= Number(variant.sm_price).toFixed(2) %></td>
                                        <td>
                                            <% if(variant.sm_inventory > 0) { %>
                                                <span class="stock-status in-stock"><%= variant.sm_inventory %></span>
                                            <% } else { %>
                                                <span class="stock-status out-of-stock">Out of Stock</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if(variant.id != currentId) { %>
                                                <a href="/product/<%= variant.id %>" class="select-variant-btn">Select</a>
                                            <% } else { %>
                                                <span class="current-label">Current</span>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            <% } %>
            
            <div class="product-specs">
                <h2>Technical Specifications</h2>
                <ul>
                    <li><strong>Product Collection:</strong> <%= product.product_collection || 'N/A' %></li>
                    <li><strong>Code Name:</strong> <%= product.code_name || 'N/A' %></li>
                    <li><strong>Manufacturer:</strong> <%= product.manufacturer || 'N/A' %></li>
                    <li><strong>Processor Number:</strong> <%= product.processor_number || 'N/A' %></li>
                    <li><strong>Lithography:</strong> <%= product.lithography || 'N/A' %></li>
                    <li><strong>Recommended Price:</strong> $<%= product.recommended_customer_price_min || 'N/A' %> - $<%= product.recommended_customer_price_max || 'N/A' %></li>
                    <li><strong>Total Cores:</strong> <%= product.total_cores || 'N/A' %> (P-cores: <%= product.performance_cores || 'N/A' %>, E-cores: <%= product.efficient_cores || 'N/A' %>)</li>
                    <li><strong>Total Threads:</strong> <%= product.total_threads || 'N/A' %></li>
                    <li><strong>Max Turbo Frequency:</strong> <%= product.max_turbo_frequency_ghz || 'N/A' %> GHz</li>
                    <li><strong>Base Frequency:</strong> P-core: <%= product.performance_core_base_frequency_ghz || 'N/A' %> GHz, E-core: <%= product.efficient_core_base_frequency_ghz || 'N/A' %> GHz</li>
                    <li><strong>Cache:</strong> <%= product.cache_mb || 'N/A' %> MB (L2: <%= product.total_l2_cache_mb || 'N/A' %> MB)</li>
                    <li><strong>TDP:</strong> Base <%= product.processor_base_power_w || 'N/A' %>W, Max <%= product.maximum_turbo_power_w || 'N/A' %>W</li>
                    <li><strong>Launch Date:</strong> <%= product.launch_date || 'N/A' %></li>
                    <li><strong>Memory Support:</strong> Up to <%= product.max_memory_size_gb || 'N/A' %> GB, <%= product.memory_types || 'N/A' %></li>
                    <li><strong>Memory Channels:</strong> <%= product.max_memory_channels || 'N/A' %></li>
                    <li><strong>Graphics:</strong> <%= product.gpu_name || 'N/A' %></li>
                    <li><strong>Graphics Base Frequency:</strong> <%= product.graphics_base_frequency_mhz || 'N/A' %> MHz</li>
                    <li><strong>Graphics Max Frequency:</strong> <%= product.graphics_max_dynamic_frequency_ghz || 'N/A' %> GHz</li>
                    <li><strong>DirectX Support:</strong> <%= product.directx_support || 'N/A' %></li>
                    <li><strong>OpenGL Support:</strong> <%= product.opengl_support || 'N/A' %></li>
                    <li><strong>Execution Units:</strong> <%= product.execution_units || 'N/A' %></li>
                    <li><strong>Sockets Supported:</strong> <%= product.sockets_supported || 'N/A' %></li>
                    <li><strong>Package Size:</strong> <%= product.package_size_mm || 'N/A' %> mm</li>
                    <li><strong>Virtualization Technology:</strong> <%= product.intel_virtualization_technology_vtx || 'N/A' %></li>
                    <li><strong>Hyper-Threading:</strong> <%= product.intel_hyper_threading_technology || 'N/A' %></li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        function toggleMenu() {
            document.getElementById('menu').classList.toggle('hidden');
        }

        // Handle variants sorting
        document.addEventListener('DOMContentLoaded', function() {
            // Handle sorting of variants
            const sortSelect = document.getElementById('sortVariants');
            if (sortSelect) {
                sortSelect.addEventListener('change', function() {
                    sortVariants(this.value);
                });
            }

            // Function to sort variants table
            function sortVariants(sortBy) {
                const tableBody = document.getElementById('variantsTableBody');
                if (!tableBody) return;

                const rows = Array.from(tableBody.querySelectorAll('tr'));
                
                rows.sort((a, b) => {
                    switch(sortBy) {
                        case 'color':
                            return a.querySelector('td:nth-child(1)').textContent.localeCompare(
                                b.querySelector('td:nth-child(1)').textContent
                            );
                        case 'price-low':
                            return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                        case 'price-high':
                            return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                        case 'ram':
                            return compareSizes(
                                a.querySelector('td:nth-child(2)').textContent,
                                b.querySelector('td:nth-child(2)').textContent
                            );
                        case 'storage':
                            return compareSizes(
                                a.querySelector('td:nth-child(3)').textContent,
                                b.querySelector('td:nth-child(3)').textContent
                            );
                        default:
                            return 0;
                    }
                });

                // Clear and re-append sorted rows
                while (tableBody.firstChild) {
                    tableBody.removeChild(tableBody.firstChild);
                }
                
                rows.forEach(row => tableBody.appendChild(row));
            }

            // Helper function to compare sizes like "8GB", "12GB", etc.
            function compareSizes(a, b) {
                // Extract numeric part
                const numA = parseInt(a.match(/\d+/) || ['0']);
                const numB = parseInt(b.match(/\d+/) || ['0']);
                
                if (numA === numB) {
                    // If numbers are the same, sort by the unit
                    return a.localeCompare(b);
                }
                
                return numA - numB;
            }
        });
    </script>
</body>
</html>
