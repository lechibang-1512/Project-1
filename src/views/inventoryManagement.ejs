<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <% locals.currentPage = 'inventory' %>
    <%- include('partials/header') %>

    <div class="container">
        <h1 class="text-center">Inventory Management</h1>
        
        <!-- Dashboard Cards -->
        <div class="dashboard-cards">
            <div class="dashboard-card">
                <h3>Total Products</h3>
                <div class="dashboard-number" id="totalProducts">
                    <% if (typeof stats !== 'undefined' && stats) { %>
                        <%= stats.totalProducts %>
                    <% } else { %>
                        --
                    <% } %>
                </div>
                <p class="dashboard-subtitle">Items in catalog</p>
            </div>
            <div class="dashboard-card">
                <h3>Low Stock Alert</h3>
                <div class="dashboard-number low-stock" id="lowStock">
                    <% if (typeof stats !== 'undefined' && stats) { %>
                        <%= stats.lowStock %>
                    <% } else { %>
                        --
                    <% } %>
                </div>
                <p class="dashboard-subtitle">Items below threshold</p>
            </div>
            <div class="dashboard-card">
                <h3>Out of Stock</h3>
                <div class="dashboard-number out-of-stock" id="outOfStock">
                    <% if (typeof stats !== 'undefined' && stats) { %>
                        <%= stats.outOfStock %>
                    <% } else { %>
                        --
                    <% } %>
                </div>
                <p class="dashboard-subtitle">Items unavailable</p>
            </div>
            <div class="dashboard-card">
                <h3>Total Value</h3>
                <div class="dashboard-number" id="totalValue">
                    <% if (typeof stats !== 'undefined' && stats) { %>
                        $<%= Number(stats.totalValue).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %>
                    <% } else { %>
                        $--
                    <% } %>
                </div>
                <p class="dashboard-subtitle">Inventory worth</p>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="inventory-actions">
            <button class="action-btn primary" onclick="showAddProductModal()">
                Add New Product
            </button>
            <button class="action-btn secondary" onclick="exportInventory()">
                Export Inventory
            </button>
            <button class="action-btn secondary" onclick="importInventory()">
                Import Inventory
            </button>
        </div>

        <!-- Search and Filter Section -->
        <div class="inventory-controls">
            <div class="search-section">
                <input type="text" id="searchInput" placeholder="Search products..." class="search-input">
                <select id="categoryFilter" class="filter-select">
                    <option value="">All Categories</option>
                    <option value="smartphones">Smartphones</option>
                    <option value="tablets">Tablets</option>
                    <option value="accessories">Accessories</option>
                </select>
                <select id="stockFilter" class="filter-select">
                    <option value="">All Stock Levels</option>
                    <option value="in-stock">In Stock</option>
                    <option value="low-stock">Low Stock</option>
                    <option value="out-of-stock">Out of Stock</option>
                </select>
            </div>
        </div>

        <!-- Inventory Table -->
        <div class="inventory-table-container">
            <table class="inventory-table">
                <thead>
                    <tr>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Brand</th>
                        <th>Category</th>
                        <th>Current Stock</th>
                        <th>Min. Stock</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="inventoryTableBody">
                    <!-- Placeholder rows - will be populated with actual data -->
                    <tr>
                        <td colspan="9" class="no-data">
                            <div class="placeholder-message">
                                <h3>No inventory data available</h3>
                                <p>Connect to your database to view and manage inventory items.</p>
                                <button class="action-btn primary" onclick="refreshInventory()">
                                    Refresh Inventory
                                </button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
            <div class="pagination-info">
                Showing <span id="currentResults">0</span> of <span id="totalResults">0</span> items
            </div>
            <div class="pagination-controls">
                <button class="pagination-btn" onclick="previousPage()" disabled>Previous</button>
                <span class="page-numbers">
                    <button class="page-btn active">1</button>
                </span>
                <button class="pagination-btn" onclick="nextPage()" disabled>Next</button>
            </div>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div id="addProductModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddProductModal()">&times;</span>
            <h2>Add New Product</h2>
            <form id="addProductForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input type="text" id="productName" name="productName" required>
                    </div>
                    <div class="form-group">
                        <label for="productBrand">Brand</label>
                        <input type="text" id="productBrand" name="productBrand" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="productCategory">Category</label>
                        <select id="productCategory" name="productCategory" required>
                            <option value="">Select Category</option>
                            <option value="smartphones">Smartphones</option>
                            <option value="tablets">Tablets</option>
                            <option value="accessories">Accessories</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="productPrice">Price ($)</label>
                        <input type="number" id="productPrice" name="productPrice" step="0.01" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="initialStock">Initial Stock</label>
                        <input type="number" id="initialStock" name="initialStock" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="minStock">Minimum Stock Threshold</label>
                        <input type="number" id="minStock" name="minStock" min="0" required>
                    </div>
                </div>
                <div class="modal-actions">
                    <button type="button" class="action-btn secondary" onclick="closeAddProductModal()">Cancel</button>
                    <button type="submit" class="action-btn primary">Add Product</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Global variables
        let currentPage = 1;
        let currentFilters = {
            search: '',
            category: '',
            stockLevel: ''
        };

        function toggleMenu() {
            document.getElementById('menu').classList.toggle('hidden');
        }

        function showAddProductModal() {
            document.getElementById('addProductModal').style.display = 'block';
        }

        function closeAddProductModal() {
            document.getElementById('addProductModal').style.display = 'none';
            document.getElementById('addProductForm').reset();
        }

        // Load inventory data
        async function loadInventoryData(page = 1, filters = {}) {
            try {
                const queryParams = new URLSearchParams({
                    page: page,
                    limit: 20,
                    ...filters
                });

                const response = await fetch(`/api/inventory?${queryParams}`);
                const data = await response.json();

                if (response.ok) {
                    displayInventoryData(data.data);
                    updatePagination(data.page, data.totalPages, data.total);
                } else {
                    console.error('Error loading inventory:', data.error);
                    showErrorMessage('Failed to load inventory data');
                }
            } catch (error) {
                console.error('Error loading inventory:', error);
                showErrorMessage('Failed to load inventory data');
            }
        }

        // Display inventory data in table
        function displayInventoryData(data) {
            const tbody = document.getElementById('inventoryTableBody');
            
            if (data.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="no-data">
                            <div class="placeholder-message">
                                <h3>No inventory data found</h3>
                                <p>No products match your current filters.</p>
                                <button class="action-btn primary" onclick="clearFilters()">
                                    Clear Filters
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.id}</td>
                    <td>${item.productName}</td>
                    <td>${item.brand}</td>
                    <td>${item.category}</td>
                    <td>${item.currentStock}</td>
                    <td>${item.minStock}</td>
                    <td>$${Number(item.price).toFixed(2)}</td>
                    <td>
                        <span class="status-badge ${item.status}">
                            ${getStatusText(item.status)}
                        </span>
                    </td>
                    <td>
                        <button class="action-btn success" onclick="updateStock(${item.id}, ${item.currentStock})">
                            Update Stock
                        </button>
                        <button class="action-btn danger" onclick="deleteProduct(${item.id})">
                            Delete
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // Get status text for display
        function getStatusText(status) {
            switch (status) {
                case 'in-stock': return 'In Stock';
                case 'low-stock': return 'Low Stock';
                case 'out-of-stock': return 'Out of Stock';
                default: return 'Unknown';
            }
        }

        // Update pagination controls
        function updatePagination(page, totalPages, totalItems) {
            document.getElementById('currentResults').textContent = totalItems;
            document.getElementById('totalResults').textContent = totalItems;
            
            const prevBtn = document.querySelector('.pagination-btn[onclick="previousPage()"]');
            const nextBtn = document.querySelector('.pagination-btn[onclick="nextPage()"]');
            
            prevBtn.disabled = page <= 1;
            nextBtn.disabled = page >= totalPages;
            
            // Update page numbers
            const pageNumbers = document.querySelector('.page-numbers');
            pageNumbers.innerHTML = '';
            
            for (let i = Math.max(1, page - 2); i <= Math.min(totalPages, page + 2); i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = `page-btn ${i === page ? 'active' : ''}`;
                pageBtn.textContent = i;
                pageBtn.onclick = () => goToPage(i);
                pageNumbers.appendChild(pageBtn);
            }
        }

        // Navigation functions
        function previousPage() {
            if (currentPage > 1) {
                goToPage(currentPage - 1);
            }
        }

        function nextPage() {
            goToPage(currentPage + 1);
        }

        function goToPage(page) {
            currentPage = page;
            loadInventoryData(page, currentFilters);
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('stockFilter').value = '';
            currentFilters = { search: '', category: '', stockLevel: '' };
            currentPage = 1;
            loadInventoryData(1, currentFilters);
        }

        // Refresh inventory and stats
        async function refreshInventory() {
            try {
                // Refresh stats
                const statsResponse = await fetch('/api/inventory/stats');
                if (statsResponse.ok) {
                    const stats = await statsResponse.json();
                    updateDashboardStats(stats);
                }
                
                // Refresh inventory data
                await loadInventoryData(currentPage, currentFilters);
                
                showSuccessMessage('Inventory refreshed successfully');
            } catch (error) {
                console.error('Error refreshing inventory:', error);
                showErrorMessage('Failed to refresh inventory');
            }
        }

        // Update dashboard stats
        function updateDashboardStats(stats) {
            document.getElementById('totalProducts').textContent = stats.totalProducts;
            document.getElementById('lowStock').textContent = stats.lowStock;
            document.getElementById('outOfStock').textContent = stats.outOfStock;
            document.getElementById('totalValue').textContent = `$${Number(stats.totalValue).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
        }

        // Update product stock
        async function updateStock(productId, currentStock) {
            const newStock = prompt(`Enter new stock quantity for product ${productId}:`, currentStock);
            if (newStock !== null && !isNaN(newStock) && newStock >= 0) {
                try {
                    const response = await fetch(`/api/inventory/${productId}/stock`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ stock: parseInt(newStock) })
                    });

                    const result = await response.json();
                    if (response.ok) {
                        showSuccessMessage('Stock updated successfully');
                        refreshInventory();
                    } else {
                        showErrorMessage(result.error || 'Failed to update stock');
                    }
                } catch (error) {
                    console.error('Error updating stock:', error);
                    showErrorMessage('Failed to update stock');
                }
            }
        }

        // Delete product
        async function deleteProduct(productId) {
            if (confirm('Are you sure you want to delete this product? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/api/inventory/${productId}`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();
                    if (response.ok) {
                        showSuccessMessage('Product deleted successfully');
                        refreshInventory();
                    } else {
                        showErrorMessage(result.error || 'Failed to delete product');
                    }
                } catch (error) {
                    console.error('Error deleting product:', error);
                    showErrorMessage('Failed to delete product');
                }
            }
        }

        // Placeholder functions
        function exportInventory() {
            alert('Export functionality coming soon!');
        }

        function importInventory() {
            alert('Import functionality coming soon!');
        }

        // Message functions
        function showSuccessMessage(message) {
            // Simple alert for now - can be enhanced with toast notifications
            alert(message);
        }

        function showErrorMessage(message) {
            alert('Error: ' + message);
        }

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            currentFilters.search = searchTerm;
            currentPage = 1;
            loadInventoryData(1, currentFilters);
        });

        // Filter functionality
        document.getElementById('categoryFilter').addEventListener('change', function(e) {
            currentFilters.category = e.target.value;
            currentPage = 1;
            loadInventoryData(1, currentFilters);
        });

        document.getElementById('stockFilter').addEventListener('change', function(e) {
            currentFilters.stockLevel = e.target.value;
            currentPage = 1;
            loadInventoryData(1, currentFilters);
        });

        // Form submission for adding new product
        document.getElementById('addProductForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const productData = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/api/inventory/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(productData)
                });

                const result = await response.json();
                if (response.ok) {
                    showSuccessMessage('Product added successfully');
                    closeAddProductModal();
                    refreshInventory();
                } else {
                    showErrorMessage(result.error || 'Failed to add product');
                }
            } catch (error) {
                console.error('Error adding product:', error);
                showErrorMessage('Failed to add product');
            }
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(e) {
            const modal = document.getElementById('addProductModal');
            if (e.target === modal) {
                closeAddProductModal();
            }
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadInventoryData(1, currentFilters);
        });
    </script>
</body>
</html>
